import com.itssvkv.todolist.model.ErrorModelimport retrofit2.HttpExceptionimport java.io.IOExceptionimport java.net.SocketTimeoutExceptionimport com.google.gson.Gson as Gsonsealed class CallResult<out T> {    data class CallSuccess<T>(val data: T) : CallResult<T>()    data class CallFailure(val msg: String, val code: Int) : CallResult<Nothing>()}sealed class CallState {    object EmptyState : CallState()    object LoadingState : CallState()    data class SuccessState<T>(val data: T) : CallState()    data class FailureState(val msg: String? = null, val code: Int? = null) : CallState()}suspend fun <T> safeApiCall(apiServers: suspend () -> T): CallResult<T> {    return try {        CallResult.CallSuccess(apiServers.invoke())    } catch (throwable: Throwable) {        when (throwable) {            is SocketTimeoutException -> CallResult.CallFailure("Time is out", -1)            is IOException -> CallResult.CallFailure("Check the internet", -2)            is HttpException ->{                val failure = getError(throwable)                CallResult.CallFailure(failure.errors[0], -5)            }            else -> {                CallResult.CallFailure(throwable.message.toString(), -4)            }        }    }}fun getError(exception: HttpException): ErrorModel {    return Gson().fromJson(exception.response()?.errorBody()?.string(), ErrorModel::class.java)}